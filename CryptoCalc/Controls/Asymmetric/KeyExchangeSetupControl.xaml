<UserControl x:Class="CryptoCalc.KeyExchangeSetupControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:local="clr-namespace:CryptoCalc"
             xmlns:core="clr-namespace:CryptoCalc.Core;assembly=CryptoCalc.Core"
             mc:Ignorable="d" 
             d:DesignWidth="450">

    <Grid Background="{StaticResource WhiteBrush}"
          d:DataContext="{x:Static local:AsymmetricKeyExchangeDesignModel.Instance}">

        <Grid.ColumnDefinitions>
            <!--Option to select what type of format to hash-->
            <ColumnDefinition Width="Auto" />
            <!--The data that will be hashed plus optional entries-->
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!--Column 0-->
        <StackPanel Margin="8"
                    local:ComboBoxWidthMatcherProperty.Value="True"
                    DataContext="{Binding KeyPairSetup}">

            <!--Algorithim combobox-->
            <TextBlock Text="Algorithim"/>
            <ComboBox ItemsSource="{Binding Algorithims}"
                      SelectedIndex ="{Binding SelectedAlgorithimIndex}"
                      x:Name="ComboBox1"
                      local:SelectionChangedProperty.Value="{Binding ChangedAlgorithimCommand}"/>

            <!--Stackpanel visibile if key size selection is used-->
            <StackPanel Visibility="{Binding UsesKeySize, Converter={local:BoolToVisibility}}">

                <!--Key size combobox-->
                <TextBlock Text="Key Size"
                           Margin="0 8 0 0"/>
                <ComboBox ItemsSource="{Binding KeySizes}"
                          SelectedIndex="{Binding KeySizeIndex}"
                          x:Name="ComboBox2"/>
            </StackPanel>

            <!--Stackpanel visible if Ec curves are used-->
            <StackPanel Visibility="{Binding UsesEcCurves, Converter={local:BoolToVisibility}}">

                <!--Ec curve provider combobox-->
                <TextBlock Text="Curve Provider"
                           Margin="0 8 0 0"/>
                <ComboBox ItemsSource="{Binding Providers}"
                          SelectedIndex ="{Binding ProviderIndex}"
                          local:SelectionChangedProperty.Value="{Binding ChangedProviderCommand}"
                          x:Name="ComboBox3"/>

                <!--Ec curve types combobox-->
                <TextBlock Text="EC Curve"
                           Margin="0 8 0 0"/>
                <ComboBox ItemsSource="{Binding EcCurves}"
                          SelectedIndex="{Binding EcCurveIndex}"
                          local:SelectionChangedProperty.Value="{Binding ChangedEcCurveCommand}"
                          x:Name="ComboBox4"/>
            </StackPanel>
        </StackPanel>


        <!--Column 1-->
        <StackPanel Grid.Column="1"
                    Margin="8">
            <StackPanel DataContext="{Binding KeyPairSetup}">
                <!--Directory text box-->
                <TextBlock Text="Key Directory"/>
                <TextBox Text="{Binding KeyDirectoryPath, UpdateSourceTrigger=PropertyChanged}" 
                         Background="{Binding KeyDirectoryPathExists, Converter={local:BoolToBackground}}"
                         local:WrappingTextBoxHeightProperty.Value="3"/>

                <!--Create key button-->
                <Button Content="New Key Pair" 
                        Style="{StaticResource DefaultButton}"
                        HorizontalAlignment="Center"
                        IsEnabled="{Binding KeyDirectoryPathExists}"
                        Command="{Binding CreateKeyPairCommand}"/>

                
                <Grid Margin="0 3 0 0">
                    <Grid.ColumnDefinitions>
                        <!--Data entry textbox-->
                        <ColumnDefinition Width="*" />
                        <!--File browser pop up button-->
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <StackPanel>
                        <!--Secret Key text box-->
                        <TextBlock>
                            <Run Text="Private Key File"/>
                            <Run Text="{Binding PrivateKeyLoaded, Converter={local:BoolToLoadedText}}"
                                 Foreground="{StaticResource DarkGreenBrush}"/>
                        </TextBlock>
                        <TextBox Text="{Binding PrivateKeyFilePath, UpdateSourceTrigger=PropertyChanged}" 
                                 Background="{Binding PrivateKeyFilePathExists, Converter={local:BoolToBackground}}"
                                 local:DragDropProperty.Value="True"
                                 local:WrappingTextBoxHeightProperty.Value="3"/>

                        <!--Public Key text box-->
                        <TextBlock Margin="0 8 0 0">
                        <Run Text="Public Key File"/>
                            <Run Text="{Binding PublicKeyLoaded, Converter={local:BoolToLoadedText}}"
                                 Foreground="{StaticResource DarkGreenBrush}"/>
                        </TextBlock>
                        <TextBox Text="{Binding PublicKeyFilePath, UpdateSourceTrigger=PropertyChanged}" 
                                 Background="{Binding PublicKeyFilePathExists, Converter={local:BoolToBackground}}"
                                 local:DragDropProperty.Value="True"
                                 local:WrappingTextBoxHeightProperty.Value="3"/>


                        <TextBlock Margin="0 8 0 0">
                        <Run Text="Other Party Public Key" />
                            <Run Text="{Binding OtherPublicKeyLoaded, Converter={local:BoolToLoadedText}}"
                                 Foreground="{StaticResource DarkestGreenBrush}"/>
                        </TextBlock>
                        <TextBox Text="{Binding OtherPartyPublicKeyFilePath, UpdateSourceTrigger=PropertyChanged}"
                                 Background="{Binding OtherPartyPublicKeyFilePathExists, Converter={local:BoolToBackground}}"
                                 local:DragDropProperty.Value="True"
                                 local:WrappingTextBoxHeightProperty.Value="3"/>

                        <!--Load and delete key buttons-->
                        <StackPanel Orientation="Horizontal"
                                    HorizontalAlignment="Center">
                            <Button FontFamily="{StaticResource FontAwesomeSolid}"
                                    Content="{StaticResource FontAwesomeFileUpload}"
                                    Style="{StaticResource DefaultButton}"
                                    IsEnabled="{Binding KeysExist}"
                                    Command="{Binding LoadKeyCommand}"
                                    Width="80"/>
                            <Button FontFamily="{StaticResource FontAwesomeSolid}"
                                    Content="{StaticResource FontAwesomeTrash}"
                                    Style="{StaticResource DefaultButton}"
                                    IsEnabled="{Binding KeysExist}"
                                    Command="{Binding DeleteKeyCommand}"
                                    Width="80"
                                    Margin="30 8 0 8"/>
                        </StackPanel>
                    </StackPanel>

                    <StackPanel Grid.Column="1">
                        <!--File browser pop pup button-->
                        <Button Command="{Binding GetPrivateKeyFilePathCommand}" 
                            Style="{StaticResource FileBrowserButton}"
                            Margin="8 17 0 0"/>

                        <!--File browser pop pup button-->
                        <Button Command="{Binding OpenFolderDialogCommand}" 
                            Style="{StaticResource FileBrowserButton}"
                            Margin="8 33 0 0"/>

                        <!--File browser pop pup button-->
                        <Button Command="{Binding OpenFolderDialogCommand}" 
                            Style="{StaticResource FileBrowserButton}"
                            Margin="8 33 0 0"/>
                    </StackPanel>
                </Grid>
                
            </StackPanel>
        </StackPanel>


        <!--Section Separator-->
        <Border Style="{StaticResource SectionBorder}" 
                Grid.ColumnSpan="2"/>
    </Grid>
</UserControl>
